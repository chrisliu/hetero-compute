/**
 * Heterogeneous implementations of SSSP pull kernel.
 * This is generated by util/scheduler/scheduler/kernelgen/sssp_hetero.py.
 */

#ifndef SRC_KERNELS_HETEROGENEOUS__SSSP_PULL_CUH
#define SRC_KERNELS_HETEROGENEOUS__SSSP_PULL_CUH

#include <omp.h>
#include <vector>

#include "../kernel_types.h"
#include "../gpu/sssp_pull.cuh"
#include "../../cuda.cuh"
#include "../../graph.h"
#include "../../schedule.h"
#include "../../util.h"

/**
 * Runs SSSP kernel heterogeneously across the CPU and GPU. Synchronization 
 * occurs in serial. 
 * SSSP heterogeneous kernel for 1 GPU.
 *
 * Parameters:
 *   - g         <- graph.
 *   - init_dist <- initial distance array.
 *   - ret_dist  <- pointer to the address of the return distance array.
 * Returns:
 *   Execution time in milliseconds.
 */
double sssp_pull_heterogeneous(const CSRWGraph &g, 
        const weight_t *init_dist, weight_t ** const ret_dist
) {
    // Configuration.
    constexpr int num_gpus     = 1;
    constexpr int num_blocks   = 5;
    constexpr int num_segments = 16;
    
    // Copy graph.
    nid_t *seg_ranges = compute_equal_edge_ranges(g, num_segments);
    
    /// Block ranges to reduce irregular memory acceses.
    nid_t block_ranges[num_blocks * 2];
    block_ranges[0] = seg_ranges[0]; // Block 0 Start 0
    block_ranges[1] = seg_ranges[1]; // Block 0 End 1 (excl.)
    block_ranges[2] = seg_ranges[1]; // Block 1 Start 1
    block_ranges[3] = seg_ranges[2]; // Block 1 End 2 (excl.)
    block_ranges[4] = seg_ranges[2]; // Block 2 Start 2
    block_ranges[5] = seg_ranges[11]; // Block 2 End 11 (excl.)
    block_ranges[6] = seg_ranges[13]; // Block 3 Start 13
    block_ranges[7] = seg_ranges[15]; // Block 3 End 15 (excl.)
    block_ranges[8] = seg_ranges[15]; // Block 4 Start 15
    block_ranges[9] = seg_ranges[16]; // Block 4 End 16 (excl.)

    /// Actual graphs on GPU memory.
    offset_t *cu_indices[num_blocks];
    wnode_t  *cu_neighbors[num_blocks];
    for (int i = 0; i < num_blocks; i++)
        copy_subgraph_to_device(g, &cu_indices[i], &cu_neighbors[i],
                block_ranges[2 * i], block_ranges[2 * i + 1]);

    // Distance.
    size_t   dist_size = g.num_nodes * sizeof(weight_t);
    weight_t *dist     = nullptr; 

    /// CPU Distance.
    CUDA_ERRCHK(cudaMallocHost((void **) &dist, dist_size));
    #pragma omp parallel for
    for (int i = 0; i < g.num_nodes; i++)
        dist[i] = init_dist[i];

    /// GPU Distances.
    weight_t *cu_dists[num_gpus];
    for (int i = 0; i < num_gpus; i++) {        
        CUDA_ERRCHK(cudaMalloc((void **) &cu_dists[i], dist_size));
        CUDA_ERRCHK(cudaMemcpy(cu_dists[i], init_dist, dist_size,
            cudaMemcpyHostToDevice));
    }

    // Update counter.
    nid_t updated     = 1;
    nid_t cpu_updated = 0;
    nid_t *cu_updateds[num_gpus];
    for (int i = 0; i < num_gpus; i++)
        CUDA_ERRCHK(cudaMalloc((void **) &cu_updateds[i], sizeof(nid_t)));

    // Start kernel!
    Timer timer; timer.Start();
    while (updated != 0) {
        updated = cpu_updated = 0;          
        
        for (int i = 0; i < num_gpus; i++)
            CUDA_ERRCHK(cudaMemset(cu_updateds[i], 0, sizeof(nid_t)));

        // Launch GPU epoch kernels.
        epoch_sssp_pull_gpu_block_min<<<64, 1024>>>(
                cu_indices[0], cu_neighbors[0],
                block_ranges[0], block_ranges[1],
                cu_dists[0], cu_updateds[0]);
        epoch_sssp_pull_gpu_block_min<<<512, 128>>>(
                cu_indices[1], cu_neighbors[1],
                block_ranges[2], block_ranges[3],
                cu_dists[0], cu_updateds[0]);
        epoch_sssp_pull_gpu_warp_min<<<64, 1024>>>(
                cu_indices[2], cu_neighbors[2],
                block_ranges[4], block_ranges[5],
                cu_dists[0], cu_updateds[0]);
        epoch_sssp_pull_gpu_warp_min<<<64, 1024>>>(
                cu_indices[3], cu_neighbors[3],
                block_ranges[6], block_ranges[7],
                cu_dists[0], cu_updateds[0]);
        epoch_sssp_pull_gpu_one_to_one<<<64, 1024>>>(
                cu_indices[4], cu_neighbors[4],
                block_ranges[8], block_ranges[9],
                cu_dists[0], cu_updateds[0]);

        // Launch CPU epoch kernels.
        #pragma omp parallel
        {
            epoch_sssp_pull_cpu_one_to_one(g, dist, 
                    seg_ranges[11], seg_ranges[13],
                    omp_get_thread_num(), omp_get_num_threads(), cpu_updated);
        }

        // Synchronize updates.
        nid_t tmp_updated;
        for (int i = 0; i < num_gpus; i++) {
            CUDA_ERRCHK(cudaMemcpy(&tmp_updated, cu_updateds[i], sizeof(nid_t),
                    cudaMemcpyDeviceToHost));
            updated += tmp_updated;
        }
        updated += cpu_updated;

        // Synchronize distances.
        CUDA_ERRCHK(cudaMemcpyAsync(
                dist + block_ranges[0],
                cu_dists[0] + block_ranges[0],
                (block_ranges[1] - block_ranges[0]) * sizeof(weight_t),
                cudaMemcpyDeviceToHost));
        CUDA_ERRCHK(cudaMemcpyAsync(
                dist + block_ranges[2],
                cu_dists[0] + block_ranges[2],
                (block_ranges[3] - block_ranges[2]) * sizeof(weight_t),
                cudaMemcpyDeviceToHost));
        CUDA_ERRCHK(cudaMemcpyAsync(
                dist + block_ranges[4],
                cu_dists[0] + block_ranges[4],
                (block_ranges[5] - block_ranges[4]) * sizeof(weight_t),
                cudaMemcpyDeviceToHost));
        CUDA_ERRCHK(cudaMemcpyAsync(
                dist + block_ranges[6],
                cu_dists[0] + block_ranges[6],
                (block_ranges[7] - block_ranges[6]) * sizeof(weight_t),
                cudaMemcpyDeviceToHost));
        CUDA_ERRCHK(cudaMemcpyAsync(
                dist + block_ranges[8],
                cu_dists[0] + block_ranges[8],
                (block_ranges[9] - block_ranges[8]) * sizeof(weight_t),
                cudaMemcpyDeviceToHost));

        if (updated != 0) {
            for (int i = 0; i < num_gpus; i++) {
                CUDA_ERRCHK(cudaMemcpyAsync(
                    cu_dists[i] + seg_ranges[11],
                    dist + seg_ranges[11],
                    (seg_ranges[13] - seg_ranges[11]) * sizeof(weight_t),
                    cudaMemcpyHostToDevice));
            }
        }

        cudaDeviceSynchronize();
    }
    timer.Stop();

    // Copy output.
    *ret_dist = new weight_t[g.num_nodes];
    #pragma omp parallel for
    for (int i = 0; i < g.num_nodes; i++)
        (*ret_dist)[i] = dist[i];

    // Free memory.
    for (int i = 0; i < num_blocks; i++) {
        CUDA_ERRCHK(cudaFree(cu_indices[i]));
        CUDA_ERRCHK(cudaFree(cu_neighbors[i]));
    }
    for (int i = 0; i < num_gpus; i++) {
        CUDA_ERRCHK(cudaFree(cu_updateds[i]));
        CUDA_ERRCHK(cudaFree(cu_dists[i]));
    }
    CUDA_ERRCHK(cudaFreeHost(dist));
    delete[] seg_ranges;

    return timer.Millisecs();
}

#endif // SRC_KERNELS_HETEROGENEOUS__SSSP_PULL_CUH
/**
 * Heterogeneous implementation of the PR pull kernel.
 * This is generated by util/scheduler/scheduler/kernelgen/pr_hetero.py.
 */

#ifndef SRC_KERNELS_HETEROGENEOUS__PR_CUH
#define SRC_KERNELS_HETEROGENEOUS__PR_CUH

#include <omp.h>
#include <vector>

#include "../kernel_types.cuh"
#include "../cpu/pr.cuh"
#include "../gpu/pr.cuh"
#include "../../cuda.cuh"
#include "../../graph.cuh"
#include "../../util.h"

constexpr int num_gpus_pr = 1;

/** Forward decl. */
void gpu_butterfly_P2P_pr(nid_t *seg_ranges, weight_t **cu_dists, 
        cudaStream_t *memcpy_streams);

/**
 * Runs PR kernel heterogeneously across the CPU and GPU. Synchronization 
 * occurs in serial. 
 * Configuration:
 *   - 1x 
 *   - 1x NVIDIA Quadro RTX 4000
 *
 * Parameters:
 *   - g         <- graph.
 *   - init_dist <- initial distance array.
 *   - ret_dist  <- pointer to the address of the return distance array.
 * Returns:
 *   Execution time in milliseconds.
 */
double pr_pull_heterogeneous(const CSRWGraph &g, 
        const weight_t *init_dist, weight_t ** const ret_dist
) {
    // Configuration.
    constexpr int num_blocks   = 7;
    constexpr int num_segments = 24;
    
    // Copy graph.
    nid_t *seg_ranges = compute_equal_edge_ranges(g, num_segments);
    
    /// Block ranges to reduce irregular memory acceses.
    constexpr int gpu_blocks[] = {0, 7};
    nid_t block_ranges[num_blocks * 2];

    block_ranges[0] = seg_ranges[0]; // Block 0 Start 0
    block_ranges[1] = seg_ranges[1]; // Block 0 End 1 (excl.)
    block_ranges[2] = seg_ranges[1]; // Block 1 Start 1
    block_ranges[3] = seg_ranges[3]; // Block 1 End 3 (excl.)
    block_ranges[4] = seg_ranges[3]; // Block 2 Start 3
    block_ranges[5] = seg_ranges[6]; // Block 2 End 6 (excl.)
    block_ranges[6] = seg_ranges[6]; // Block 3 Start 6
    block_ranges[7] = seg_ranges[15]; // Block 3 End 15 (excl.)
    block_ranges[8] = seg_ranges[15]; // Block 4 Start 15
    block_ranges[9] = seg_ranges[19]; // Block 4 End 19 (excl.)
    block_ranges[10] = seg_ranges[19]; // Block 5 Start 19
    block_ranges[11] = seg_ranges[23]; // Block 5 End 23 (excl.)
    block_ranges[12] = seg_ranges[23]; // Block 6 Start 23
    block_ranges[13] = seg_ranges[24]; // Block 6 End 24 (excl.)

    //degrees
    offset_t *cu_degrees      = nullptr;
    offset_t *degrees = new offset_t[g.num_nodes];
    for(int i=0; i<g.num_nodes; i++){
        degrees[i]=g.get_degree(i);
    }
    size_t deg_size = g.num_nodes * sizeof(offset_t);
    CUDA_ERRCHK(cudaMalloc((void **) &cu_degrees, deg_size));
    CUDA_ERRCHK(cudaMemcpy(cu_degrees, degrees, deg_size,
            cudaMemcpyHostToDevice));

    /// Actual graphs on GPU memory.
    offset_t *cu_indices[num_blocks];
    wnode_t  *cu_neighbors[num_blocks];

    for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
        CUDA_ERRCHK(cudaSetDevice(gpu));
        for (int block = gpu_blocks[gpu]; block < gpu_blocks[gpu + 1];
                block++) 
            copy_subgraph_to_device(g,
                    &cu_indices[block], &cu_neighbors[block],
                    block_ranges[2 * block], block_ranges[2 * block + 1]);
    }

    // Initialize memcopy streams.
    // idx = from_gpu * num_gpus_pr + to_gpu;
    cudaStream_t memcpy_streams[num_gpus_pr * num_gpus_pr];
    for (int from = 0; from < num_gpus_pr; from++) {
        CUDA_ERRCHK(cudaSetDevice(from));
        for (int to = 0; to < num_gpus_pr; to++)
            CUDA_ERRCHK(cudaStreamCreate(&memcpy_streams[from * num_gpus_pr + to]));
    }

    // Distance.
    size_t   dist_size = g.num_nodes * sizeof(weight_t);
    weight_t *dist     = nullptr; 

    /// CPU Distance.
    CUDA_ERRCHK(cudaMallocHost((void **) &dist, dist_size));
    #pragma omp parallel for
    for (int i = 0; i < g.num_nodes; i++)
        dist[i] = init_dist[i];

    /// GPU Distances.
    weight_t *cu_dists[num_gpus_pr];
    for (int gpu = 0; gpu < num_gpus_pr; gpu++) {        
        CUDA_ERRCHK(cudaSetDevice(gpu));
        CUDA_ERRCHK(cudaMalloc((void **) &cu_dists[gpu], dist_size));
        CUDA_ERRCHK(cudaMemcpyAsync(cu_dists[gpu], dist, dist_size,
            cudaMemcpyHostToDevice, memcpy_streams[gpu * num_gpus_pr]));
    }
    for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
        CUDA_ERRCHK(cudaStreamSynchronize(memcpy_streams[gpu * num_gpus_pr]));
    }

    // Update counter.
    nid_t updated     = 1;
    nid_t cpu_updated = 0;
    nid_t *cu_updateds[num_gpus_pr];
    for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
        CUDA_ERRCHK(cudaSetDevice(gpu));
        CUDA_ERRCHK(cudaMalloc((void **) &cu_updateds[gpu], 
                sizeof(nid_t)));
    }

    // Create compute streams and markers.
    cudaStream_t compute_streams[num_blocks]; // Streams for compute.
    cudaEvent_t  compute_markers[num_blocks]; // Compute complete indicators.
    for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
        CUDA_ERRCHK(cudaSetDevice(gpu));
        for (int b = gpu_blocks[gpu]; b < gpu_blocks[gpu + 1]; b++) {
            CUDA_ERRCHK(cudaStreamCreate(&compute_streams[b]));
            CUDA_ERRCHK(cudaEventCreate(&compute_markers[b]));
        }
    }

    // Get init vertex.
    // TODO: add this as a parameter.
    nid_t start;
    for (nid_t i = 0; i < g.num_nodes; i++)
        if (init_dist[i] != 1.0f/g.num_nodes) start = i;

    // Start kernel!
    Timer timer; timer.Start();
    int epochs = 0;

    /*
    // Push for the first iteration.
    // TODO: implement push for more than one epoch. Requires parallel queue.
    for (wnode_t nei : g.get_neighbors(start)) {
        if (nei.v == start) continue;

        dist[nei.v] = nei.w;       
        for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
            CUDA_ERRCHK(cudaSetDevice(gpu));
            CUDA_ERRCHK(cudaMemcpyAsync(
                cu_dists[gpu] + nei.v, dist + nei.v,
                sizeof(weight_t), cudaMemcpyHostToDevice));
        }
    }
    epochs++;
    */

    int iters=0;
    while (updated != 0) {
        if(iters>200){
            break;
        }
        iters++;
        // Reset update counters.
        updated = cpu_updated = 0;          
        for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
            CUDA_ERRCHK(cudaSetDevice(gpu));
            CUDA_ERRCHK(cudaMemsetAsync(cu_updateds[gpu], 0, 
                    sizeof(nid_t)));
        }

        // Launch GPU epoch kernels.
        // Implicit CUDA device synchronize at the start of kernels.
        CUDA_ERRCHK(cudaSetDevice(0));
        epoch_pr_pull_gpu_block_red<<<256, 1024, 0, compute_streams[0]>>>(
                cu_indices[0], cu_neighbors[0],
                block_ranges[0], block_ranges[1],
                cu_dists[0], cu_updateds[0], g.num_nodes, cu_degrees);
        CUDA_ERRCHK(cudaEventRecord(compute_markers[0], compute_streams[0]));
        epoch_pr_pull_gpu_block_red<<<1024, 256, 0, compute_streams[1]>>>(
                cu_indices[1], cu_neighbors[1],
                block_ranges[2], block_ranges[3],
                cu_dists[0], cu_updateds[0], g.num_nodes, cu_degrees);
        CUDA_ERRCHK(cudaEventRecord(compute_markers[1], compute_streams[1]));
        epoch_pr_pull_gpu_block_red<<<4096, 64, 0, compute_streams[2]>>>(
                cu_indices[2], cu_neighbors[2],
                block_ranges[4], block_ranges[5],
                cu_dists[0], cu_updateds[0], g.num_nodes, cu_degrees);
        CUDA_ERRCHK(cudaEventRecord(compute_markers[2], compute_streams[2]));
        epoch_pr_pull_gpu_warp_red<<<256, 1024, 0, compute_streams[3]>>>(
                cu_indices[3], cu_neighbors[3],
                block_ranges[6], block_ranges[7],
                cu_dists[0], cu_updateds[0], g.num_nodes, cu_degrees);
        CUDA_ERRCHK(cudaEventRecord(compute_markers[3], compute_streams[3]));
        epoch_pr_pull_gpu_block_red<<<4096, 64, 0, compute_streams[4]>>>(
                cu_indices[4], cu_neighbors[4],
                block_ranges[8], block_ranges[9],
                cu_dists[0], cu_updateds[0], g.num_nodes, cu_degrees);
        CUDA_ERRCHK(cudaEventRecord(compute_markers[4], compute_streams[4]));
        epoch_pr_pull_gpu_warp_red<<<256, 1024, 0, compute_streams[5]>>>(
                cu_indices[5], cu_neighbors[5],
                block_ranges[10], block_ranges[11],
                cu_dists[0], cu_updateds[0], g.num_nodes, cu_degrees);
        CUDA_ERRCHK(cudaEventRecord(compute_markers[5], compute_streams[5]));
        epoch_pr_pull_gpu_one_to_one<<<256, 1024, 0, compute_streams[6]>>>(
                cu_indices[6], cu_neighbors[6],
                block_ranges[12], block_ranges[13],
                cu_dists[0], cu_updateds[0], g.num_nodes, cu_degrees);
        CUDA_ERRCHK(cudaEventRecord(compute_markers[6], compute_streams[6]));

        // Launch CPU epoch kernels.
                

        // Sync compute streams.
        for (int b = 0; b < num_blocks; b++)
            CUDA_ERRCHK(cudaEventSynchronize(compute_markers[b]));

        // Synchronize updates.
        nid_t gpu_updateds[num_gpus_pr];
        for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
            CUDA_ERRCHK(cudaSetDevice(gpu));
            CUDA_ERRCHK(cudaMemcpyAsync(
                    &gpu_updateds[gpu], cu_updateds[gpu],  sizeof(nid_t), 
                    cudaMemcpyDeviceToHost, memcpy_streams[gpu * num_gpus_pr + gpu]));
        }
        updated += cpu_updated;

        for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
            CUDA_ERRCHK(cudaSetDevice(gpu));
            CUDA_ERRCHK(cudaStreamSynchronize(memcpy_streams[gpu * num_gpus_pr + gpu]));
            updated += gpu_updateds[gpu];
        }

        // Only update GPU distances if another epoch will be run.
        if (updated != 0) {
            // Copy CPU distances to all GPUs.
            

            // Copy GPU distances peer-to-peer.
            // Not implmented if INTERLEAVE=true.
            gpu_butterfly_P2P_pr(seg_ranges, cu_dists, memcpy_streams); 

            // Synchronize HtoD async calls.
            
        }

        

        
        epochs++;
    }
    // Copy GPU distances back to host.
    CUDA_ERRCHK(cudaSetDevice(0))
    CUDA_ERRCHK(cudaMemcpyAsync(
        dist + seg_ranges[0], cu_dists[0] + seg_ranges[0],
        (seg_ranges[24] - seg_ranges[0]) * sizeof(weight_t), 
        cudaMemcpyDeviceToHost, memcpy_streams[0 * num_gpus_pr + 0]));
    // Wait for memops to complete.
    for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
        CUDA_ERRCHK(cudaSetDevice(gpu));
        CUDA_ERRCHK(cudaDeviceSynchronize());
    }
    
    timer.Stop();

    // Copy output.
    *ret_dist = new weight_t[g.num_nodes];
    #pragma omp parallel for
    for (int i = 0; i < g.num_nodes; i++)
        (*ret_dist)[i] = dist[i];

    // Free streams.
    for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
        CUDA_ERRCHK(cudaSetDevice(gpu));
        for (int b = gpu_blocks[gpu]; b < gpu_blocks[gpu + 1]; b++) {
            CUDA_ERRCHK(cudaStreamDestroy(compute_streams[b]));
            CUDA_ERRCHK(cudaEventDestroy(compute_markers[b]));
        }

        for (int to = 0; to < num_gpus_pr; to++)
            CUDA_ERRCHK(cudaStreamDestroy(memcpy_streams[gpu * num_gpus_pr + to]));
    }

    // Free memory.
    for (int gpu = 0; gpu < num_gpus_pr; gpu++) {
        CUDA_ERRCHK(cudaSetDevice(gpu));
        CUDA_ERRCHK(cudaFree(cu_updateds[gpu]));
        CUDA_ERRCHK(cudaFree(cu_dists[gpu]));
        
        for (int block = gpu_blocks[gpu]; block < gpu_blocks[gpu + 1];
                block++
        ) {
            CUDA_ERRCHK(cudaFree(cu_indices[block]));
            CUDA_ERRCHK(cudaFree(cu_neighbors[block]));
        }
    }
    CUDA_ERRCHK(cudaFreeHost(dist));
    delete[] seg_ranges;

    return timer.Millisecs();
}

/**
 * Enable peer access between all compatible GPUs.
 */
void enable_all_peer_access_pr() {
    int can_access_peer;
    for (int from = 0; from < num_gpus_pr; from++) {
        CUDA_ERRCHK(cudaSetDevice(from));

        for (int to = 0; to < num_gpus_pr; to++) {
            if (from == to) continue;

            CUDA_ERRCHK(cudaDeviceCanAccessPeer(&can_access_peer, from, to));
            if(can_access_peer) {
                CUDA_ERRCHK(cudaDeviceEnablePeerAccess(to, 0));
                std::cout << from << " " << to << " yes" << std::endl;
            } else {
                std::cout << from << " " << to << " no" << std::endl;
            }
        }
    }
}

/**
 * Butterfly GPU P2P transfer.
 */
void gpu_butterfly_P2P_pr(nid_t *seg_ranges, weight_t **cu_dists, 
    cudaStream_t *memcpy_streams
) {
    
}

#endif // SRC_KERNELS_HETEROGENEOUS__PR_CUH
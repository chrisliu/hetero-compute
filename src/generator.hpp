#ifndef GENERATOR_H
#define GENERATOR_H

#include <cstdint>
#include <cstdlib>
#include <iostream>
#include <limits>
#include <ostream>

#include "types.h" // Edge types. 


template <typename TNode, typename TWeight = TNode>
class Generator {
public:
    // Construct a generator that emits a graph of size 2^{scale} and avg.
    // degree.
    Generator(int scale_, int degree);    
    // Emit a weighted graph generated by the R-MAT algorithm.
    void emit_RMAT_EL(std::ostream &out);

private:
    int scale;          // Number of bits used.
    uint64_t num_nodes; // Number of nodes.
    uint64_t num_edges; // Number of edges.
};


template <typename TNode, typename TWeight>
Generator<TNode, TWeight>::Generator(int scale_, int degree) 
    : scale(scale_)                 // Save scale for later.
    , num_nodes(1l << scale)        // # of nodes = 2^{scale}.
    , num_edges(num_nodes * degree) // # of edges = # of nodes * degree.
{
    // Make sure node types can contain the number of nodes.
    if (num_nodes > std::numeric_limits<TNode>::max()) {
        std::cerr << "Node ID type (max: " << std::numeric_limits<TNode>::max()
            << ") is too small to hold " << num_nodes << "." << std::endl;
        std::exit(EXIT_FAILURE);
    }
}

template <typename TNode, typename TWeight>
void Generator<TNode, TWeight>::emit_RMAT_EL(std::ostream &out) {
    const float A = 0.57f, B = 0.19f, C = 0.19f;

    // TODO: (1) Parallel execution.
    // TODO: (2) Stream output to allow for graphs that are larger than the 
    //           available memory.
    
}

#endif // GENERATOR_H
